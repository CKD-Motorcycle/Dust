#+TITLE: Notes on Dust Go implementation
Updated: [2015-02-02 Mon]

* State
** Packaging
Copyright/licensing information:

  - Most of the code currently in go/ is by (and copyrighted by) Drake Wilson and is expected to
    wind up MIT-licensed as this section resolves.

  - DustModel/dist was moved from a fork of another Go package by blanu earlier, and it refers to
    its own LICENSE file which may not have been copied; it claims to be BSD-style.

** Crypto primitives
The cryptions package needs something of an interface rework, and some things need to be locked down re
Skein-native MAC/KDF versus HMAC/HKDF and such.  The SecretBytes API should be split up and have its
Destroy functionality removed along the way.

** Crypto/framing layer
Much of this works now, but the protocol is being revised to address various flaws and this isn't documented
yet.  There is no ensemble layer on top of this, which means it's not actually completely usable for
bidirectional streams yet; that needs to be added.

** Shaping layer
The interface for models is mostly stable now.  A silly pseudo-model is available which has loopback
communication verified functional.  The model generator generates models which half-work with encode/decode,
but they have bad interaction with flow control and weird parameters.

Connection durations are handled in the most basic way possible; the model generator is currently generating
models with such low durations that no data can make it without ensemble capability.

** Test proxy
This now works as a TCP/TCP proxy.  It does not do anything too fancy.  Error reporting should be better
(using managed processes).  Doing statistical tests would be useful here.

** Key tool
Basically works, and the CLI is now reasonable.  It would be nice to be able to password-protect the private
keys in identity files, and it's an open question whether the current textual format(s) have any other bad
environmental characteristics; possibly need to ask the Tor people about this.

* Tasks
** Protocol: hash out re-ensembling, including MTU situation
** Redo exported types in cryptions subpackage
Use all concrete exported types.  Use the type system to help constrain key usage.
** Drop destroy signals for SecretBytes etc.
None of the mainline Go crypto packages use early-destroy semantics, and there's too
much sensitive material floating around---we just have to assume the process's entire
address space is safe for all relevant secrets.

Maybe in a few decades we'll have a compiler that lets us do this better.
** Minor/specific cleanups
*** Rename newPlainDataFrame -> newDataFrame
*** Get needed entropy earlier in CryptoSession initialization to avoid later failures
*** Use more generic network address types
*** Consider whether to use Google's "contexts" mechanism instead of current procman.Link
** Documentation
*** Top-level type/function passes
*** As-built protocol documentation
*** Consistent 'byte' versus 'octet' terminology
This isn't a _terribly_ big deal maybe, but Go likes to say 'byte' and so does the original Dust
spec, but dsy1 likes using 'octet' along the lines of how the IETF etc. do things, so there's
probably some inconsistent usage here.
** Stashed
*** Consider allowing a PBKDF for private identity files

* (metadata)

Local variables:
mode: org
mode: auto-fill
fill-column: 110
End:

#+TITLE: Notes on Dust Go implementation
Updated: [2015-01-16 Fri]

* State
** Packaging
Copyright/licensing information:

  - Most of the code currently in go/ is by (and copyrighted by) Drake Wilson and is expected to
    wind up MIT-licensed as this section resolves.

  - DustModel/dist was moved from a fork of another Go package by blanu earlier, and it refers to
    its own LICENSE file which may not have been copied; it claims to be BSD-style.

Need better external documentation in general as things become more stable.

** Crypto primitives
Skein-512-256 is being used instead of Skein-256-256, and the MAC/stream stuff is a little ambiguous right
now versus the original Dust specification used.  We're using dchest's Skein, which needs to be audited.

The SecretBytes API is a little wonky given Go's memory and execution model, and is mostly voodoo.  Possibly
it should be taken out entirely.

** Crypto/framing layer
Most of this should probably work now, modulo the stubbed-out crypto primitives, but it hasn't been tested
against anything else yet and needs another verification pass.

** Shaping layer
There's an API for models; blanu is working on the model generator, plus there's a silly pseudo-model
available.  Loopback communication has been verified working with this model, modulo some protocol-design
difficulties (via the Dust spec) regarding handshake latency versus shaping padding.

** Test proxy
This mostly seems to work, protocol-wise, modulo all the broken parts above.

There's some wonkiness surrounding the composition of goroutines somewhere in here; it's not clear whether
it's here or in the shaping layer, but the symptom is ungraceful exits or maybe deadlock when the connection
goes away.  This may have been fixed by now.

** Key tool
This mostly works but should have a cleaner CLI.

* Tasks
** BeginDustClient, BeginDustServer functions
** Rename newPlainDataFrame -> newDataFrame
** Document overview of packages
** Document _actual_ crypto protocol being implemented
(as this differs from the original Dust spec in a few ways already)
** Document remaining top-level types/functions/etc.
** Document buffer ownership better in crypto layer
** Make sure goroutine composition works reasonably
** Clean up concrete versus interface type exports
** Lock down CLI for test proxy
** Lock down CLI for key tool
** Lock down file format for private identity files
*** Consider allowing a PBKDF for this
** Modify protocol further 
*** Avoid bogus key material reuse
*** Avoid stuck states during handshaking
** Decide what to do with SecretBytes: propagate destroy signals or remove entirely
Finalizers are useful as a stopgap if they're kept.  The Skein stuff probably needs
to be copied in-tree and then modified to allow zeroing the structure... ?

It should probably be possible to use move semantics for SecretBytes, which would make
the ownership transitions safer.
** Get needed entropy earlier in CryptoSession initialization to avoid later failures
** Figure out MTU situation
** Higher-performance buffer discipline for models?

* (metadata)

Local variables:
mode: org
mode: auto-fill
fill-column: 110
End:

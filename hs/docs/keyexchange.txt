The key exchange for Dust is inspired by the ntor protocol, but differs in important ways due to differing requirements. In particular, the Dust key exchange
is non-interactive, instead using a request-response style. This differs from many cryptographic protocols which perform an interactive handshake in which
they exchange keys in both directions before any encryption takes place.

The constraint on the Dust key exchange is because the protocol encoding communications may not be interactive. Consider for instance a standard HTTP
conversation. The client sends its entire messages first, without waiting for a response from the server. If an encrypted Dust message is encoded in the
HTTP request, then it must be encrypted with a key derived independently from communication with the server, ruling out a typical interactive handshake.
Another example, which is a bit more extreme but also the use case Dust was originally designed for, is a client request consisting entirely of a single
UDP packet, with no response from the server whatsoever.

Here is a sketch of the Dust key exchange protocol, following the structure and style of the ntor paper:

When B^ is initialized as server:
1. Set (b,B) as B^'s static key pair and S as the server's address (IP and port)
2. Advertise (S,B) out of band to potential clients

When A^ is initialzied as client:
1. Obtain (S,B) out of band

When A^ sends a request M to B^:
1. Set (x,X) as A^'s ephemeral keypair
2. Compute skx = ECDH(x,B)
3. Generate a random IV named I
3. Encrypt E = AES(skx,I,M)
4. Send (X,I,E)

When B^ receives an encrypted request E from A^:
1. Receive (X,I,E)
2. Compute skx = ECDH(b,X)
3. Decrypt M = AES(skx,I,E)

When B^ sends a response N to A^:
1. Set (y,Y) as B^'s ephemeral keypair
2. Compute sky = ECDH(y,X)
3. Generate a random IV named J
3. Encrypt F = AES(sky,J,N)
4. Send (Y,J,F)

When A^ receives an encrypted response F from B^:
1. Receive (Y,J,F)
2. Compute sky = ECDH(x,Y)
3. Decrypt N = AES(sky,J,F)

Some things should be apparent from this protocl description:
* The client and server protocols are symmetric. They are identical except for which pair of public keys is used for ECDH.
* The client request requires only the server's permanent public key, which it obtained out-of-band beforehand.
* The server response requires only the client's ephemeral public key, which it obtained from the request.

Please note that the goal of this cryptographic exchange is different from most protocols. Messages here are not meant to be secret, only hidden.
The encryption is only required to make the message unreadable by intermediaries long enough for it to be delivered. If the server is compromised, the
simplest attack would be to just add it to an IP blacklist. In the case of Dust, detection of encrypted communication is sufficient to count as failure,
rendering more advanced attacks unnecessary. The attacks which are important to Dust are ones in which a test can be constructed to determine if a message
is an encrypted Dust message and not simply random noise. For instance, some obfuscating protocols use a random shared secret transmitted in the handshake.
This approach fails the distinguishability test.


package $packagename

import (
  "time"
  "git.torproject.org/pluggable-transports/obfs4.git/common/csrand"
  "github.com/blanu/Dust/go/Dust"
  "github.com/blanu/Dust/go/DustModel/dist"
  "github.com/blanu/Dust/go/DustModel/huffman"
)

type $model_type struct {
  $huffman.decl
}

type $codec_type struct {
  *$model_type
  $duration.decl
  $packet_sleep.decl
  $packet_length.decl
  $encode.decl
  $decode.decl
  $incoming_sequence.decl
  $outgoing_sequence.decl
}

func computeModel() (result *$model_type) {
  var err error
  result = &$model_type{}
  $huffman.body
  return
}

func (model $model_type) newCodec() (result *$codec_type, err error) {
  // TODO: is this the best choice of source to use?
  prng := csrand.Rand
  result = &$codec_type{
    $duration.data
    $packet_sleep.data
    $packet_length.data
    $encode.data
    $decode.data,
    $incoming_sequence.data,
    $outgoing_sequence.data}
  return
}

func (model $model_type) MakeClientPair() (Dust.ShapingEncoder, Dust.ShapingDecoder, error) {
  codec, err := model.newCodec()
  return codec, codec, err
}

func (model $model_type) MakeServerPair() (Dust.ShapingEncoder, Dust.ShapingDecoder, error) {
  codec, err := model.newCodec()
  return codec, codec, err
}

func init() {
  model := computeModel()
  constructor := func(params map[string]string) (Dust.ShapingModel, error) {
    if err := Dust.CheckUnackedParams(params, nil); err != nil {
      return nil, err
    }

    return model, nil
  }

  Dust.RegisterModel("$name", constructor)
}

func clampUint16(n float64) uint16 {
  // Use positive test for in-range to handle NaN properly, just in case.
  switch {
  case 0.0 <= n && n <= 65535.0:
    return uint16(n)
  case 65535.0 < n:
    return 65535
  default:
    return 0
  }
}

func (self $codec_type) WholeStreamDuration() time.Duration {
  return time.Duration($duration.expr) * time.Millisecond
}

func (self $codec_type) MaxPacketLength() uint16 {
  return 65535
}

func (self $codec_type) NextPacketLength() uint16 {
  return $packet_length.expr
}

func (self $codec_type) NextPacketSleep() time.Duration {
  return time.Duration($packet_sleep.expr) * time.Millisecond
}

func (codec $codec_type) ShapeBytes(dst, src []byte) (dn, sn int) {
  $decode.body
}

func (codec $codec_type) UnshapeBytes(dst, src []byte) (dn, sn int) {
  $encode.body
}

func (codec $codec_type) InjectBytes(dst, src []byte) (dn, sn int) {
  $incoming_sequence.body
}

func (codec $codec_type) WithdrawBytes(dst, src []byte) (dn, sn int) {
  $incoming_sequence.body
}
